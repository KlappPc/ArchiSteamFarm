<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CategoryAccess" xml:space="preserve">
    <value>访问</value>
  </data>
  <data name="CategoryAdvanced" xml:space="preserve">
    <value>高级</value>
  </data>
  <data name="CategoryCore" xml:space="preserve">
    <value>内核</value>
  </data>
  <data name="CategoryDebugging" xml:space="preserve">
    <value>调试中</value>
  </data>
  <data name="CategoryPerformance" xml:space="preserve">
    <value>性能</value>
  </data>
  <data name="CategoryUpdates" xml:space="preserve">
    <value>更新</value>
  </data>
  <data name="ConfirmRemoval" xml:space="preserve">
    <value>您确认要移除这个设置吗？</value>
  </data>
  <data name="ErrorBotNameEmpty" xml:space="preserve">
    <value>您的帐户名是空的！</value>
  </data>
  <data name="ErrorCantRemoveGlobalConfig" xml:space="preserve">
    <value>您无法移除全局设置</value>
  </data>
  <data name="ErrorCantRenameGlobalConfig" xml:space="preserve">
    <value>您无法重命名全局配置</value>
  </data>
  <data name="ErrorConfigDirectoryNotFound" xml:space="preserve">
    <value>无法找到配置目录！</value>
  </data>
  <data name="ErrorConfigPropertyInvalid" xml:space="preserve">
    <value>配置 {0} 属性无效︰ {1}</value>
    <comment>{0} will be replaced by name of the configuration property, {1} will be replaced by invalid value</comment>
  </data>
  <data name="ErrorInvalidCurrentCulture" xml:space="preserve">
    <value>提供了无效的CurrentCulture，ConfigGenerator将以默认形式运行</value>
  </data>
  <data name="ErrorNameAlreadyUsed" xml:space="preserve">
    <value>这个名称已经被使用了</value>
    <comment>This happens e.g. when user wants to create a bot with name that exists already</comment>
  </data>
  <data name="ErrorNameReserved" xml:space="preserve">
    <value>这个名称受到保留，无法使用</value>
    <comment>This happens e.g. when user wants to create a bot with reserved name, such as "ASF"</comment>
  </data>
  <data name="ErrorObjectIsNull" xml:space="preserve">
    <value>{0} 无效！</value>
    <comment>{0} will be replaced by object's name</comment>
  </data>
  <data name="ErrorVersionMismatch" xml:space="preserve">
    <value>你正尝试为你的ASF使用无效的ConfigGenerator版本

ASF版本: {0} | ConfigGenerator版本: {1}

请使用与ASF相匹配的ConfigGenerator版本。您将会被重定向至适合的发布版本。</value>
    <comment>{0} will be replaced by ASF version (string), {1} will be replaced by ConfigGenerator version (string). Please note that this string should include newlines for formatting.</comment>
  </data>
  <data name="New" xml:space="preserve">
    <value>新建</value>
    <comment>This is used as MessageBox title</comment>
  </data>
  <data name="Removal" xml:space="preserve">
    <value>移除</value>
    <comment>This is used as MessageBox title</comment>
  </data>
  <data name="Rename" xml:space="preserve">
    <value>重命名</value>
    <comment>This is used as MessageBox title</comment>
  </data>
  <data name="TutorialBotFormEnabled" xml:space="preserve">
    <value>非常好！现在你的bot已经启用。这其实就是你在ASF使用这个bot所需要做的，但你可能想要配置至少2个以上的属性：{0} 和 {1}. 如果你想继续这个教程，请继续。如果你不确定某些属性如何配置，或者需要更多的帮助，请参阅wiki。</value>
    <comment>{0} will be replaced by "SteamLogin" configuration property, {1} will be replaced by "SteamPassword" configuration property</comment>
  </data>
  <data name="TutorialBotFormReady" xml:space="preserve">
    <value>你的ASF已经准备就绪！只需启动ASF.exe并且正确地输入了所有内容，你应该会注意到ASF正在登录，并在随后开始挂卡。如果你使用了steam令牌或者二步验证，ASF可能需要在运行时向你要求认证码。</value>
  </data>
  <data name="TutorialFinished" xml:space="preserve">
    <value>恭喜！你已经完成了所有ASF运行条件和我们给你准备的教程。现在推荐去wiki看看所有的配置环节，ASF提供非常简洁的功能供你配置，例如离线挂卡或者调整ASF为你的账号提供最高效的挂卡算法。这些都是可选的，你可以随时按照你的意愿关闭我们的配置。我们希望你会喜欢这个我们为你做的软件！</value>
  </data>
  <data name="TutorialMainFormBotsManagementButtons" xml:space="preserve">
    <value>在视窗的顶端你可以看到现在读取的设置，与3个按钮，分别为：移除 [-] ，重命名[~] 与添加[+]。</value>
    <comment>If possible, try to keep visual representation of buttons: [-], [~] and [+]</comment>
  </data>
  <data name="TutorialMainFormConfigurationWiki" xml:space="preserve">
    <value>请注意，所有关于有效配置属性，包括它们的描述，用途，还有接收的值，这些信息都在我们的GitHub wiki上面。请作为参考使用。</value>
  </data>
  <data name="TutorialMainFormConfigurationWindow" xml:space="preserve">
    <value>在窗口中间你可以为你当前配置来设置所有可用的属性。</value>
  </data>
  <data name="TutorialMainFormFinished" xml:space="preserve">
    <value>好的，让我们开始来配置自己的ASF。点击加号 [+] 按钮来添加你的第一个steam账户。</value>
    <comment>If possible, try to keep visual representation of [+] button</comment>
  </data>
  <data name="TutorialMainFormHelpButton" xml:space="preserve">
    <value>在右上角你可以看见帮助按钮([?])，他将会将你重定向至ASF百科以获取更多信息。</value>
    <comment>If possible, try to keep visual representation of [?] button</comment>
  </data>
  <data name="TutorialMainFormShown" xml:space="preserve">
    <value>这是ASF配置生成器的主界面，它很容易上手！</value>
  </data>
  <data name="TutorialNewBotFormFinished" xml:space="preserve">
    <value>你可以看见，你的bot现在已经可以配置了！你需要做的第一件事就是把 {0} 属性从false改成true，试试看！</value>
    <comment>{0} will be replaced by name of the configuration property ("Enabled")</comment>
  </data>
  <data name="TutorialNewBotFormShown" xml:space="preserve">
    <value>做得好！你现在需要设置你的bot名字了。一个很好的例子就是使用你即将配置的这个Steam账号的名字，或者其他任何让你将来能轻松联系到你的bot的名字。</value>
  </data>
  <data name="TutorialStart" xml:space="preserve">
    <value>欢迎！我发现这是你第一次使用ASF配置生成工具，就让我来帮你一下。</value>
  </data>
  <data name="UserInputBotName" xml:space="preserve">
    <value>请输入新bot名： </value>
    <comment>Please note that this translation should end with space</comment>
  </data>
  <data name="WarningConfigPropertyModified" xml:space="preserve">
    <value>{0} 已被设置为: {1}</value>
    <comment>{0} will be replaced by name of the configuration property, {1} will be replaced by new value</comment>
  </data>
</root>
