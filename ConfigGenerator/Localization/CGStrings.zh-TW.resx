<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CategoryAccess" xml:space="preserve">
    <value>存取</value>
  </data>
  <data name="CategoryAdvanced" xml:space="preserve">
    <value>進階</value>
  </data>
  <data name="CategoryCore" xml:space="preserve">
    <value>核心</value>
  </data>
  <data name="CategoryDebugging" xml:space="preserve">
    <value>偵錯</value>
  </data>
  <data name="CategoryPerformance" xml:space="preserve">
    <value>性能</value>
  </data>
  <data name="CategoryUpdates" xml:space="preserve">
    <value>更新</value>
  </data>
  <data name="ConfirmRemoval" xml:space="preserve">
    <value>您確定要刪除此設定嗎？</value>
  </data>
  <data name="ErrorBotNameEmpty" xml:space="preserve">
    <value>您的BOT名稱是空的！</value>
  </data>
  <data name="ErrorCantRemoveGlobalConfig" xml:space="preserve">
    <value>您不能刪除全域設定！</value>
  </data>
  <data name="ErrorCantRenameGlobalConfig" xml:space="preserve">
    <value>您不能重新命名全域設定！</value>
  </data>
  <data name="ErrorConfigDirectoryNotFound" xml:space="preserve">
    <value>無法找到設定檔所在的目錄！</value>
  </data>
  <data name="ErrorConfigPropertyInvalid" xml:space="preserve">
    <value>設置的 {0} 屬性無效︰ {1}</value>
    <comment>{0} will be replaced by name of the configuration property, {1} will be replaced by invalid value</comment>
  </data>
  <data name="ErrorInvalidCurrentCulture" xml:space="preserve">
    <value>您提供的 CurrentCulture 無效，ConfigGenerator 將以預設值繼續運行 ！</value>
  </data>
  <data name="ErrorNameAlreadyUsed" xml:space="preserve">
    <value>該名稱已被使用！</value>
    <comment>This happens e.g. when user wants to create a bot with name that exists already</comment>
  </data>
  <data name="ErrorNameReserved" xml:space="preserve">
    <value>該名稱已被保留 ！</value>
    <comment>This happens e.g. when user wants to create a bot with reserved name, such as "ASF"</comment>
  </data>
  <data name="ErrorObjectIsNull" xml:space="preserve">
    <value>{0} 為空值！</value>
    <comment>{0} will be replaced by object's name</comment>
  </data>
  <data name="ErrorVersionMismatch" xml:space="preserve">
    <value>你一直試圖在你的 ASF 上使用無效的 ConfigGenerator 版本 ！ ASF: {0} |ConfigGenerator: {1} 請為你的 ASF 二進位檔使用合適的 ConfigGenerator 版本。你將被重新導向至適當的發行版本......</value>
    <comment>{0} will be replaced by ASF version (string), {1} will be replaced by ConfigGenerator version (string). Please note that this string should include newlines for formatting.</comment>
  </data>
  <data name="New" xml:space="preserve">
    <value>新增</value>
    <comment>This is used as MessageBox title</comment>
  </data>
  <data name="Removal" xml:space="preserve">
    <value>移除</value>
    <comment>This is used as MessageBox title</comment>
  </data>
  <data name="Rename" xml:space="preserve">
    <value>重新命名</value>
    <comment>This is used as MessageBox title</comment>
  </data>
  <data name="TutorialBotFormEnabled" xml:space="preserve">
    <value>非常好！現在已啟用您的機器人帳號。事實上，這已經是你為了在 ASF 使用這個機器人帳號所需要做的所有事情，但您也許會想設定至少2個以上的配置︰ {0} 和 {1}。如果你想要繼續本教學，請便。如果你不確定如何設定應有的屬性，或者如果您需要額外的説明，別忘了參考 wiki。</value>
    <comment>{0} will be replaced by "SteamLogin" configuration property, {1} will be replaced by "SteamPassword" configuration property</comment>
  </data>
  <data name="TutorialBotFormReady" xml:space="preserve">
    <value>您的 ASF 現在已準備好了，只要簡單地啟動 ASF.exe ！ 如果您所輸入的一切都正確，你應該會發現 ASF 正在登錄然後開始掛卡。如果你有使用 SteamGuard 或 其他的二階段驗證器，ASF 在運行期間可能會需要您提供這些認證碼。</value>
  </data>
  <data name="TutorialFinished" xml:space="preserve">
    <value>恭喜你！你已經完成了使 ASF 所需的一切必要事項，也完成了我們為您所準備的教學。強烈建議您現在去閱讀在 Wiki 上的設定章節，ASF 提供一些很棒的功能來供您設置，像是離線掛卡或者為您的帳戶使用的最有效的掛卡演算法來優化 ASF。而這全部都是可選的，只要你想，你可以在任何時候自由地開關這些設置。我們希望你會喜歡我們為你製作的軟體！</value>
  </data>
  <data name="TutorialMainFormBotsManagementButtons" xml:space="preserve">
    <value>在視窗的上方，你會發現最近一次所載入的設定，以及 刪除 [-]，重新命名 [~] 和 新增 [+] 等3個額外按鈕。</value>
    <comment>If possible, try to keep visual representation of buttons: [-], [~] and [+]</comment>
  </data>
  <data name="TutorialMainFormConfigurationWiki" xml:space="preserve">
    <value>請注意，那些可進行設定的屬性，包括他們的描述，目的和可接受的值域，等等的相關訊息都在我們 GitHub wiki 上。請多參考並善加利用。</value>
  </data>
  <data name="TutorialMainFormConfigurationWindow" xml:space="preserve">
    <value>在視窗中所有可供配置的屬性裡，您可以調整當下所選中的設定。</value>
  </data>
  <data name="TutorialMainFormFinished" xml:space="preserve">
    <value>好吧，讓我們來開始設定自己的 ASF。按一下加號 [+] 按鈕來新增您的第一個Steam帳號 ！</value>
    <comment>If possible, try to keep visual representation of [+] button</comment>
  </data>
  <data name="TutorialMainFormHelpButton" xml:space="preserve">
    <value>在右上角你可以找到説明按鈕 [？] 會將您轉至 ASF wiki 來獲得更多資訊。</value>
    <comment>If possible, try to keep visual representation of [?] button</comment>
  </data>
  <data name="TutorialMainFormShown" xml:space="preserve">
    <value>這是 ASF ConfigGenerator 主畫面，它相當容易使用 ！</value>
  </data>
  <data name="TutorialNewBotFormFinished" xml:space="preserve">
    <value>正如你所看到的，你的機器人帳號現在已準備好要來設定了 ！第一件你要做的事就是切換 {0} 屬性從 false 改為 true，試一試 ！</value>
    <comment>{0} will be replaced by name of the configuration property ("Enabled")</comment>
  </data>
  <data name="TutorialNewBotFormShown" xml:space="preserve">
    <value>做得好！現在會詢問你的 BOT 帳號要用什麼名字。其中一個很好的範例便是你設定中所使用的 Steam 帳號，或者選擇任何其他較容易與正在設定中的 BOT 帳號聯想起來的暱稱。</value>
  </data>
  <data name="TutorialStart" xml:space="preserve">
    <value>歡迎 ！我注意到您是第一次使用 ASF ConfigGenerator，所以讓我來幫你一下。</value>
  </data>
  <data name="UserInputBotName" xml:space="preserve">
    <value>請輸入新 BOT 的名稱: </value>
    <comment>Please note that this translation should end with space</comment>
  </data>
  <data name="WarningConfigPropertyModified" xml:space="preserve">
    <value>{0} 已被設置為︰ {1}</value>
    <comment>{0} will be replaced by name of the configuration property, {1} will be replaced by new value</comment>
  </data>
</root>
