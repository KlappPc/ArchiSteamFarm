<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CategoryAccess" xml:space="preserve">
    <value>アクセス</value>
  </data>
  <data name="CategoryAdvanced" xml:space="preserve">
    <value>高度</value>
  </data>
  <data name="CategoryCore" xml:space="preserve">
    <value>コア</value>
  </data>
  <data name="CategoryDebugging" xml:space="preserve">
    <value>デバッグ中</value>
  </data>
  <data name="CategoryPerformance" xml:space="preserve">
    <value>パフォーマンス</value>
  </data>
  <data name="CategoryUpdates" xml:space="preserve">
    <value>アップデート</value>
  </data>
  <data name="ConfirmRemoval" xml:space="preserve">
    <value>この設定を削除してもよろしいですか？</value>
  </data>
  <data name="ErrorBotNameEmpty" xml:space="preserve">
    <value>Botの名前が空です！</value>
  </data>
  <data name="ErrorCantRemoveGlobalConfig" xml:space="preserve">
    <value>グローバル設定を削除することはできません！</value>
  </data>
  <data name="ErrorCantRenameGlobalConfig" xml:space="preserve">
    <value>グローバル設定を改名することはできません！</value>
  </data>
  <data name="ErrorConfigDirectoryNotFound" xml:space="preserve">
    <value>設定ディレクトリが見つかりませんでした！</value>
  </data>
  <data name="ErrorConfigPropertyInvalid" xml:space="preserve">
    <value>設定された{0} プロパティは無効です: {1}</value>
    <comment>{0} will be replaced by name of the configuration property, {1} will be replaced by invalid value</comment>
  </data>
  <data name="ErrorInvalidCurrentCulture" xml:space="preserve">
    <value>指定されたCurrentCultureが有効ではありません。ConfigGeneratorはデフォルトで実行されます！</value>
  </data>
  <data name="ErrorNameAlreadyUsed" xml:space="preserve">
    <value>この名前は既に使用されています！</value>
    <comment>This happens e.g. when user wants to create a bot with name that exists already</comment>
  </data>
  <data name="ErrorNameReserved" xml:space="preserve">
    <value>この名前は留保されています！</value>
    <comment>This happens e.g. when user wants to create a bot with reserved name, such as "ASF"</comment>
  </data>
  <data name="ErrorObjectIsNull" xml:space="preserve">
    <value>{0} は空(null) です！</value>
    <comment>{0} will be replaced by object's name</comment>
  </data>
  <data name="ErrorVersionMismatch" xml:space="preserve">
    <value>ASFに不適切なバージョンのConfigGeneratorを使用しようとしたようです。

ASF: {0} | ConfigGenerator: {1}

ASFに適切なバージョンのConfigGeneratorを使用してください。適切なリリースにリダイレクトされます...</value>
    <comment>{0} will be replaced by ASF version (string), {1} will be replaced by ConfigGenerator version (string). Please note that this string should include newlines for formatting.</comment>
  </data>
  <data name="New" xml:space="preserve">
    <value>新規</value>
    <comment>This is used as MessageBox title</comment>
  </data>
  <data name="Removal" xml:space="preserve">
    <value>除去</value>
    <comment>This is used as MessageBox title</comment>
  </data>
  <data name="Rename" xml:space="preserve">
    <value>改名</value>
    <comment>This is used as MessageBox title</comment>
  </data>
  <data name="TutorialBotFormEnabled" xml:space="preserve">
    <value>素晴らしい！あなたのbotのインスタンスが有効になりました。これがASFでbotを使用するために行うことの全てですが、少なくとも2つ以上プロパティを設定したくなるでしょう: {0} と {1} です。このチュートリアルを続行したい場合は、そうしてください。追加のヘルプが必要な場合や、どのようにプロパティを設定するべきかわからない場合は、wikiを参照してください。</value>
    <comment>{0} will be replaced by "SteamLogin" configuration property, {1} will be replaced by "SteamPassword" configuration property</comment>
  </data>
  <data name="TutorialBotFormReady" xml:space="preserve">
    <value>ASFは準備ができました！ASF.exeを起動してください。全てがうまく入力されていれば、ASFがログインし、アイドリングを開始していることに気づくはずです。もしSteamGuardや二次認証が有効な場合は、ASFは実行時にそれらの資格情報を必要とします。</value>
  </data>
  <data name="TutorialFinished" xml:space="preserve">
    <value>おめでとうございます！あなたはASFを使用するために必要な手順を終え、チュートリアルを終了しようとしています。これらは全て任意ですが、オフラインファーミングやアイドリングアルゴリズムの改善などの素敵な機能を利用するために、wikiの設定の項を読むことを強くおすすめします。なお、もうコンフィグレータを閉じても大丈夫です。あなたのためのソフトウェアをお楽しみいただけることを願っています！</value>
  </data>
  <data name="TutorialMainFormBotsManagementButtons" xml:space="preserve">
    <value>ウィンドウの上部には、現在読み込まれている設定と3つの追加ボタン: 除去[-], 改名[~], 新規作成[+] があります。</value>
    <comment>If possible, try to keep visual representation of buttons: [-], [~] and [+]</comment>
  </data>
  <data name="TutorialMainFormConfigurationWiki" xml:space="preserve">
    <value>利用できる設定プロパティやその説明、目的、有効な値などは全てGitHubのwikiで公開されています。必要な時に参照してください。</value>
  </data>
  <data name="TutorialMainFormConfigurationWindow" xml:space="preserve">
    <value>ウィンドウの中央では、現在選択されている設定の利用できる設定プロパティを構成できます。</value>
  </data>
  <data name="TutorialMainFormFinished" xml:space="preserve">
    <value>さて、ASFの設定を始めましょう。プラス [+] ボタンをクリックして、あなたの最初のsteamアカウントを追加してください！</value>
    <comment>If possible, try to keep visual representation of [+] button</comment>
  </data>
  <data name="TutorialMainFormHelpButton" xml:space="preserve">
    <value>右上の隅には、ASF wikiにリダイレクトするヘルプ [?] ボタンがあります。</value>
    <comment>If possible, try to keep visual representation of [?] button</comment>
  </data>
  <data name="TutorialMainFormShown" xml:space="preserve">
    <value>これがメインのASF ConfigGeneratorスクリーンです。本当に使いやすいんですよ！</value>
  </data>
  <data name="TutorialNewBotFormFinished" xml:space="preserve">
    <value>お気づきの通り、あなたのbotは構成される準備ができています！最初にするべきことは、 {0} のプロパティをfalseからtrueに切り替えることです。やってみましょう！</value>
    <comment>{0} will be replaced by name of the configuration property ("Enabled")</comment>
  </data>
  <data name="TutorialNewBotFormShown" xml:space="preserve">
    <value>よくできました！あなたのbotの名前を決めましょう。例として、設定するsteamアカウントのニックネームや、あなたにとってわかりやすい名前がよいでしょう。</value>
  </data>
  <data name="TutorialStart" xml:space="preserve">
    <value>ようこそ！初めてASF ConfigGeneratorを起動したようですね。まずは少しお手伝いをさせてください。</value>
  </data>
  <data name="UserInputBotName" xml:space="preserve">
    <value>新しいbotの名前を入力してください: </value>
    <comment>Please note that this translation should end with space</comment>
  </data>
  <data name="WarningConfigPropertyModified" xml:space="preserve">
    <value>{0} は {1} に設定されました</value>
    <comment>{0} will be replaced by name of the configuration property, {1} will be replaced by new value</comment>
  </data>
</root>