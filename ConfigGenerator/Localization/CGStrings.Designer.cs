//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConfigGenerator.Localization {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class CGStrings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal CGStrings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ConfigGenerator.Localization.CGStrings", typeof(CGStrings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access.
        /// </summary>
        internal static string CategoryAccess {
            get {
                return ResourceManager.GetString("CategoryAccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Advanced.
        /// </summary>
        internal static string CategoryAdvanced {
            get {
                return ResourceManager.GetString("CategoryAdvanced", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Core.
        /// </summary>
        internal static string CategoryCore {
            get {
                return ResourceManager.GetString("CategoryCore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debugging.
        /// </summary>
        internal static string CategoryDebugging {
            get {
                return ResourceManager.GetString("CategoryDebugging", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Performance.
        /// </summary>
        internal static string CategoryPerformance {
            get {
                return ResourceManager.GetString("CategoryPerformance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Updates.
        /// </summary>
        internal static string CategoryUpdates {
            get {
                return ResourceManager.GetString("CategoryUpdates", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you really want to remove this config?.
        /// </summary>
        internal static string ConfirmRemoval {
            get {
                return ResourceManager.GetString("ConfirmRemoval", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your bot name is empty!.
        /// </summary>
        internal static string ErrorBotNameEmpty {
            get {
                return ResourceManager.GetString("ErrorBotNameEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can&apos;t remove global config!.
        /// </summary>
        internal static string ErrorCantRemoveGlobalConfig {
            get {
                return ResourceManager.GetString("ErrorCantRemoveGlobalConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can&apos;t rename global config!.
        /// </summary>
        internal static string ErrorCantRenameGlobalConfig {
            get {
                return ResourceManager.GetString("ErrorCantRenameGlobalConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Config directory could not be found!.
        /// </summary>
        internal static string ErrorConfigDirectoryNotFound {
            get {
                return ResourceManager.GetString("ErrorConfigDirectoryNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configured {0} property is invalid: {1}.
        /// </summary>
        internal static string ErrorConfigPropertyInvalid {
            get {
                return ResourceManager.GetString("ErrorConfigPropertyInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your provided CurrentCulture is invalid, ConfigGenerator will keep running with default one!.
        /// </summary>
        internal static string ErrorInvalidCurrentCulture {
            get {
                return ResourceManager.GetString("ErrorInvalidCurrentCulture", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This name is already used!.
        /// </summary>
        internal static string ErrorNameAlreadyUsed {
            get {
                return ResourceManager.GetString("ErrorNameAlreadyUsed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This name is reserved!.
        /// </summary>
        internal static string ErrorNameReserved {
            get {
                return ResourceManager.GetString("ErrorNameReserved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} is null!.
        /// </summary>
        internal static string ErrorObjectIsNull {
            get {
                return ResourceManager.GetString("ErrorObjectIsNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You&apos;ve attempted to use invalid ConfigGenerator version for your ASF!
        ///
        ///ASF: {0} | ConfigGenerator: {1}
        ///
        ///Please use matching ConfigGenerator version for your ASF binary. You&apos;ll be redirected to appropriate release....
        /// </summary>
        internal static string ErrorVersionMismatch {
            get {
                return ResourceManager.GetString("ErrorVersionMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New.
        /// </summary>
        internal static string New {
            get {
                return ResourceManager.GetString("New", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Removal.
        /// </summary>
        internal static string Removal {
            get {
                return ResourceManager.GetString("Removal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rename.
        /// </summary>
        internal static string Rename {
            get {
                return ResourceManager.GetString("Rename", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Excellent! Now your bot instance is enabled. In fact, that was everything you had to do in order to use this bot in ASF, but you might want to configure at least 2 more config properties: {0} and {1}. If you want to continue the tutorial, please do so. Remember to refer to the wiki if you&apos;re unsure how given property should be configured, or if you need additional help..
        /// </summary>
        internal static string TutorialBotFormEnabled {
            get {
                return ResourceManager.GetString("TutorialBotFormEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your ASF is now ready! Simply launch ASF.exe binary and if you typed everything properly, you should notice that ASF is logging in and starts idling. If you have SteamGuard or two-factor authentication enabled, ASF might need to ask you for those credentials during runtime..
        /// </summary>
        internal static string TutorialBotFormReady {
            get {
                return ResourceManager.GetString("TutorialBotFormReady", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Congratulations! You&apos;ve done everything that is needed in order to make ASF usable, that also finishes the tutorial that we prepared for you. It&apos;s highly recommended to read entire configuraton section on the wiki now, as ASF offers some really neat features for you to configure, such as offline farming or tuning ASF for using the most efficient idling algorithm for your account. All of that is optional though, and you&apos;re free to close our configurator whenever you wish. We hope that you&apos;ll enjoy the softwa [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TutorialFinished {
            get {
                return ResourceManager.GetString("TutorialFinished", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At the top of the window you can notice currently loaded configs, and 3 extra buttons for removing [-], renaming [~] and adding new ones [+]..
        /// </summary>
        internal static string TutorialMainFormBotsManagementButtons {
            get {
                return ResourceManager.GetString("TutorialMainFormBotsManagementButtons", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please note that all information about available config properties, including their description, purpose, and accepted values, is available on our GitHub wiki. Please use it as a reference..
        /// </summary>
        internal static string TutorialMainFormConfigurationWiki {
            get {
                return ResourceManager.GetString("TutorialMainFormConfigurationWiki", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In the middle of the window you can configure all config properties that are available for you, for your currently selected config..
        /// </summary>
        internal static string TutorialMainFormConfigurationWindow {
            get {
                return ResourceManager.GetString("TutorialMainFormConfigurationWindow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Alright, let&apos;s start configuring our ASF. Click on the plus [+] button in order to add your first steam account!.
        /// </summary>
        internal static string TutorialMainFormFinished {
            get {
                return ResourceManager.GetString("TutorialMainFormFinished", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In the top right corner you can find help button [?] which will redirect you to ASF wiki for more information..
        /// </summary>
        internal static string TutorialMainFormHelpButton {
            get {
                return ResourceManager.GetString("TutorialMainFormHelpButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is the main ASF ConfigGenerator screen, it&apos;s really easy to use!.
        /// </summary>
        internal static string TutorialMainFormShown {
            get {
                return ResourceManager.GetString("TutorialMainFormShown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to As you can see, your bot is now ready to be configured! First thing that you want to do is switching {0} property from false to true, try it!.
        /// </summary>
        internal static string TutorialNewBotFormFinished {
            get {
                return ResourceManager.GetString("TutorialNewBotFormFinished", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Good job! You&apos;ll be asked for your bot name now. A good example would be a nickname that you&apos;re using for the steam account you&apos;re about to configure, or any other name of your choice which will be easy for you to connect with the bot instance that is being configured..
        /// </summary>
        internal static string TutorialNewBotFormShown {
            get {
                return ResourceManager.GetString("TutorialNewBotFormShown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Welcome! I noticed that you&apos;re using ASF ConfigGenerator for the first time, so let me help you a bit..
        /// </summary>
        internal static string TutorialStart {
            get {
                return ResourceManager.GetString("TutorialStart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please enter new bot name: .
        /// </summary>
        internal static string UserInputBotName {
            get {
                return ResourceManager.GetString("UserInputBotName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} has been set to: {1}.
        /// </summary>
        internal static string WarningConfigPropertyModified {
            get {
                return ResourceManager.GetString("WarningConfigPropertyModified", resourceCulture);
            }
        }
    }
}
